{"version":3,"sources":["components/AddCategory.js","components/helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","Fragment","ReactDOM","render","document","getElementById"],"mappings":"4MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAe9C,OAEI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCLlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCF,EADpC,+DAEAG,MAAMD,GAFN,cAEbE,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QATvB,kBAaZK,GAbY,4CAAH,sDCCPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMT,EAAS,EAATA,IAElC,OACI,sBAAKa,UAAU,2DAAf,UACC,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCHAO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KA6BtC,OArBAC,qBAAU,WAENvB,EAAQC,GACHuB,MAAK,SAAAC,GAEEH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAK1B,CAACnB,IASGoB,ED1BuBK,CAAazB,GAA/BY,EAFyB,EAE9BN,KAAYa,EAFkB,EAElBA,QASnB,OACI,qCACE,6BAAKnB,IACJmB,EAAS,wCAAiB,KAC7B,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OAEN,cAAC,EAAD,eAEKA,GADGA,EAAIC,aEerBgB,MAjCf,WAAyB,IAAD,EAEgBxC,mBAAS,CAAC,SAF1B,mBAEbyC,EAFa,KAED1C,EAFC,KAUpB,OACI,eAAC,IAAM2C,SAAP,WACI,8CACA,cAAC,EAAD,CAAa3C,cAAgBA,IAC7B,uBAEA,6BAEQ0C,EAAWnB,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MCpB7B6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.0f2f430c.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [ inputValue,...cats])\r\n            setInputValue('')\r\n        }\r\n\r\n    }\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories :PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${(category)}&limit=10&api_key=tqryzEfz9FqSXuKVB9CGU8ctirLL0y8B`\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__bounce animate__delay-2s\">\r\n         <img src={url} alt={title}></img>\r\n         <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images,loading} = useFetchGifs(category);\r\n\r\n    /* const [images, setImages] = useState([])\r\n    //Ejecutar funcion solo cuando se renderiza el componente por primera vez\r\n    useEffect(() => {\r\n       getGifs(category).then(imgs=>\r\n        setImages(imgs))\r\n    }, [category]) */\r\n\r\n    return (\r\n        <>\r\n          <h3>{category}</h3> \r\n          {loading? <p>Loading</p> : null}\r\n        <div className=\"card-grid\">  \r\n            {\r\n                images.map(img =>\r\n                    (\r\n                        <GifGridItem\r\n                         key = {img.id}\r\n                         {...img} />\r\n                    ))\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../components/helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                  \r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                \r\n            })\r\n\r\n    }, [category])\r\n\r\n    /* setTimeout(() => {\r\n        setState({\r\n            data: [1, 2, 3, 4, 5, 6, 7, 8],\r\n            loading: false\r\n        })\r\n    }, 3000) */\r\n\r\n    return state; //Objeto  data [] y loading \r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { Ejemplo } from './components/Ejemplo';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\nfunction GifExpertApp() {\r\n\r\n    const [categories, setCategories] = useState(['Goku']);\r\n\r\n\r\n    /*     const handleAdd =()=>{\r\n        setCategories([...categories,\"Doraemon\"])\r\n        setCategories(cats=>[...cats,'HunterXhunter']) \r\n    } */\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories ={setCategories}/>\r\n            <hr />\r\n            \r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                        key={category}\r\n                        category={category}/>\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n            \r\n\r\n        </React.Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n \n    <GifExpertApp />,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}